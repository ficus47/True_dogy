#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#ifndef get_name2_h
#define get_name2_h

char* get_name2(char a[]){
  int i = 0;
  char* b = (char*)malloc(999 * sizeof(char));

  while (*a){
    if (i == 1){
      strcat(b, a);
    }
    if (strchr(a, '"') && i == 1){
      //nothing yet

    }

    if (strchr(a, '\'') && i == 1){
      i = 1;
    }else if (strchr(a, '"') && i == 0){
      return b;
    }
    a++;
  }
  return b;
}

#endif#ifndef name_variable_h
#define name_variable_h

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

char* name_variable(char a[]){
  char *b = (char *)malloc(999 * sizeof(char));
  int sep = 0;
  char *d = (char *)malloc(999 * sizeof(char));
  strcpy(d, a);
  
  while (*a){

    if (*a == '"' && sep == 1){
      return b;
    }

    if (sep == 1){
      strncat(b, a, 1);
    }

    if (*a == '"' && sep == 0){
      sep = 1;

    }
    
    a++;
    
  }

  return d;
  
}

#endif#ifndef get_list_h
#define get_list_h

#include "struct_variable54.h"
#include "../utilities/copy.h"
#include "../utilities/extract.h"
#include "../utilities/copy.h"
#include "../split2.h"

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "name_variable.h"

#include "../utilities/char/forchar.h"


#ifndef split240_h
#define split240_h

int split240(char chaine[], char *delim, char *a[]) {
  // Initialise les variables


  char *chain = chaine;
  int i = 0;
  char buf[9999];
  int o = 0;
  char saucisse[9999];

  while (*chain) {
    char s = *chain;
    if (s == *delim) {

      get24(buf, o, saucisse);

      a[i] = strdup(saucisse);
      o = -1;
      i++;

    } else {
      buf[o] = *chain;
    }


    chain++;
    o++;

  }
;
  get24(buf, o, saucisse);

  a[i] = strdup(saucisse);
  return i;

}

#endif


int get_list(struct variable var[], char b[]){
  int i = 0;

  for (int o = 0; o < 999; o++){
    if (strcmp(var[o].name, "") != 0){
      i++;
    }
    else {
      return i;
    }
    if (strcmp(var[o].name, b) == 0){
      return o;
    }
  }
  return i;
}

#ifndef get_type_h
#define get_type_h

int get_type(char a[]){
  return 0;
}

#ifndef get_name_h
#define get_name_h

char* get_name(char a[]){
  int i = 0;
  char* b = (char*)malloc(999 * sizeof(char));
  
  while (*a){
    if (i == 1){
      strcat(b, a);
    }
    if (strchr(a, '"') && i == 1){
      //nothing yet
      
    }
      
    if (strchr(a, '\'') && i == 0){
      i = 1;
    }else if (strchr(a, '\'') && i == 1){
      return b;
    }
    a++;
  }
  return b;
}
#ifndef saucisse_h
#define saucisse_h

void saucisse(struct variable *var[], char b[]){
  char *ratatouille[9999];
  char sep = '=';
  char buffer[999];
  
  strcpy(buffer, "int");
  split240(b, &sep, ratatouille);

  
  int i = get_list(*var, name_variable(b));

  
  if (get_type(b) == 0){
    char buff[999];
    char buffer2[999];
    char *point1 = (*var)[i].name;
    char *point2 = (*var)[i].value;
    char *point3 = (*var)[i].type;


    //name_variable(b, buff);
    strcpy(buff, name_variable(b));
    //printf("%s", name_variable(b));

    strcpy(point1, "");
    strcpy(point2, "");
    strcpy(point3, "");

    strip(ratatouille[1]);
    
    strcpy(point1, buff);
    strcpy(point2, name_variable(ratatouille[1]));
    strcpy(point3, buffer);

    //printf("\n %s %s %s\n", point1, point2, point3);
    
    /*printf("\n -> %s <-\n", (*var)[i].name);
    printf("\n -> %s <-\n", (*var)[i].type);
    printf("\n -> %s <-\n", (*var)[i].value);*/
  }
}

#endif
#endif
#endif
#endif

#ifndef last_h
#define last_h

void last(struct variable *var[], char b[], char c[]){
  char buffer[999];

  strcpy(buffer, "int");

  int i = get_list(*var, name_variable(b));


  if (get_type(b) == 0){
    char buff[999];
    char buffer2[999];
    char *point1 = (*var)[i].name;
    char *point2 = (*var)[i].value;
    char *point3 = (*var)[i].type;


    //name_variable(b, buff);
    strcpy(buff, name_variable(b));
    //printf("%s", name_variable(b));

    strcpy(point1, "");
    strcpy(point2, "");
    strcpy(point3, "");


    strcpy(point1, c);
    strcpy(point2, b);
    strcpy(point3, buffer);

    //printf("\n %s %s %s\n", point1, point2, point3);

    /*printf("\n -> %s <-\n", (*var)[i].name);
    printf("\n -> %s <-\n", (*var)[i].type);
    printf("\n -> %s <-\n", (*var)[i].value);*/
  }
}

#endif

#ifndef something_h
#define something_h

void something(struct variable *var[]){
  for (int i = 0; i < 999; i++){
    if (strcmp((*var)[i].name, "") != 0){
      printf("\n%s : %s\n", (*var)[i].name, (*var)[i].value);
    }
  }
}

#endif
#ifndef VARIABLE_H
#define VARIABLE_H

#include <string.h>

struct variable {
char name[999];
char value[999];
char type[999];
};

#endif

#ifndef LINE_H
#define LINE_H

struct line {
int line;
int type;
};

#endif
#include "struct_variable54.h"
#include "name_variable.h"
#include "../utilities/char/replace.h"
#include "../utilities/char/forchar.h"

#include <string.h>
#include <stdio.h>

#ifndef GET_VALUE_H
#define GET_VALUE_H

char* get_value(char a[], struct variable *var[]){
  strip(a);
  for (int i = 0; i < 999; i++){
    if (strcmp(a, (*var)[i].name) == 0){
      if (strcmp((*var)[i].name, "output") == 0){
        replace((*var)[i].value, '~', ' ');
        return  (*var)[i].value;

      }
      return (*var)[i].value;
    }
  }
  return NULL;
}

#endif
#ifndef replace_h
#define replace_h

#include <string.h>

void replace(char *a, char b, char c){
  while (*a){
    if (*a == b){
      *a = c;
    }
    a++;
  }
}

#endif#ifndef new_line_h
#define new_line_h

#include <string.h>
#include <stdlib.h>


void new_line(char a[], char b){
  for (int i = 0;a[i] != '\0';i++){
    if (a[i] == b){
    a[i] = '\0';
    }
  }
}

#endif

#ifndef strip_h
#define strip_h


void strip(char *chaine) {
    // Vérifier si la chaîne est vide
    if (chaine == NULL || *chaine == '\0') {
        return;
    }

    // Trouver la première position non vide
    char *ptr = chaine;
    while (*ptr != '\0' && *ptr == ' ') {
        ptr++;
    }

    // Décaler les caractères vers l'avant pour supprimer les espaces au début
    memmove(chaine, ptr, strlen(ptr) + 1);
}


#endif

#ifndef split_text_h
#define split_text_h
char **splitline(char *line, char *delim) {
  char **tokens = NULL;
  char *token;
  int i = 0;

  // Découper la ligne en jetons en fonction du séparateur
  token = strtok(line, delim);
  while (token != NULL) {
    // Augmenter la taille du tableau de jetons et cast the return value of realloc to char **
    tokens = (char **)realloc(tokens, sizeof(char *) * (i + 1));
    // Stocker le jeton dans le tableau
    tokens[i++] = token;
    // Obtenir le prochain jeton
    token = strtok(NULL, delim);
  }

  // Ajouter un pointeur null à la fin du tableau
  tokens[i] = NULL;

  return tokens;
}


#endif

#ifndef comparaison_h
#define comparaison_h

#include "../../var/variables.h"
#include "../../var/struct_variable54.h"
#include "../../utilities/extract.h"
#include "../../utilities/char/forchar.h"
#include "../../var/get_value.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

void compar(char a[], int b, struct variable *line[]){
  char eq[3] = "==";

  char aa, bb;
  aa = ' ';bb = '=';

  char buff[999];
  char buff2[999];
  char list[999];

  if (strstr(a, eq) != NULL){
    extract2(a, &aa, &bb, buff, list);
    extract2(a, &bb, &aa, buff2, list);
    buff2[0] = ' ';

    strip(buff2);
    if (strcmp(get_value(buff, line), get_value(buff2, line))){
      b = 1;
    }
  }
}

#endif 
#ifndef copy_h
#define copy_h

#include <stdlib.h>

void copy(char a[], char b[]){
  int i = 0;
  while (b[i] != '\0'){
    a[i] = b[i];
    i++;
  }
  a[i] = '\0';

  for (int o = sizeof(a); o < 999; o++){
    if (o > i){
      a[o] = '\0';
    }
  }
}

#endif #ifndef extract_h
#define extract_h

#include <string.h>


void extract(char a[], char *b, char *c, char between[]){
  int i = 0;

  while (*a){
    if (*a == *b){
      i = 1;
    }
    if (i == 1){
      strcpy(between, a);
    }
    if (*a == *c && i == 1){
      break;
    }
    a++;
  }
}

#endif

#ifndef extract2_h
#define extract2_h

char *extract2(char a[], char *b, char *c, char *between, char between2[]) {
  int first = 1;
  int between_len = strlen(between);

  while (*a) {
    if (*a == *c) {
      strncpy(between, between2, between_len);
      between[between_len] = '\0';
      return between2;
    }

    if (first == 1) {
      between2[between_len++] = *a;
      between2[between_len] ='\0'; // Assurez-vous que la chaîne est null-terminée
    }

    if (*a == *b && first != 1) {
      first = 1;
    }

    a++;
  }

  return NULL;
}


#endif
#ifndef extraire_h
#define extraire_h

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char *extraire(char *a, char *b, char *c, char *between, char between2[]) {
  int first = 0;
  int between_len = strlen(between);

  while (*a) {
    if (*a == *c) {
      strncpy(between, between2, between_len);
      between[between_len] = '\0';
      return between2;
    }

    if (first == 1) {
      between2[between_len++] = *a;
      between2[between_len] ='\0'; // Assurez-vous que la chaîne est null-terminée
    }

    if (*a == *b && first != 1) {
      first = 1;
    }

    a++;
  }

  return NULL;
}

#endif